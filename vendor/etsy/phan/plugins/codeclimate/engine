#!/usr/bin/env php
<?php declare(strict_types = 1);

require_once(__DIR__ . '/../../src/requirements.php');

$code_base = require_once(__DIR__ . '/../../src/codebase.php');
require_once(__DIR__ . '/../../src/Phan/Bootstrap.php');

use Phan\CLI;
use Phan\CodeBase;
use Phan\Config;
use Phan\Issue;
use Phan\Output\Collector\BufferingCollector;
use Phan\Output\Filter\CategoryIssueFilter;
use Phan\Output\Filter\ChainedIssueFilter;
use Phan\Output\Filter\FileIssueFilter;
use Phan\Output\Filter\MinimumSeverityFilter;
use Phan\Output\ParallelConsoleOutput;
use Phan\Output\PrinterFactory;
use Symfony\Component\Console\Output\ConsoleOutput;
use Phan\Phan;

// chdir to the code path in order to support the .phan/config.php file
$old_cwd = getcwd();

// Create our CLI interface and load arguments
chdir('/code');
$cli = new CLI();
chdir($old_cwd);

// Obtain the config
$codeclimate_config = json_decode(file_get_contents('/config.json'), true);

// Parse the config
if (isset($codeclimate_config['config']['minimum-severity'])) {
    $minimum_severity = (int) $codeclimate_config['config']['minimum-severity'];
} else {
    $minimum_severity = 0;
}

$mask = -1;

if (isset($codeclimate_config['config']['ignore-undeclared'])) {
    $mask ^= Issue::CATEGORY_UNDEFINED;
}

if (isset($codeclimate_config['config']['quick'])) {
    Config::get()->quick_mode = true;
}

if (isset($codeclimate_config['config']['backward-compatibility-checks'])) {
    Config::get()->backward_compatibility_checks = true;
}

if (isset($codeclimate_config['config']['dead-code-detection'])) {
    Config::get()->dead_code_detection = true;
}

if (isset($codeclimate_config['config']['file_extensions'])) {
    $file_extensions = explode(",", $codeclimate_config['config']['file_extensions']);
}
else
{
    $file_extensions = ['php'];
}

$include_paths = [];

$queue_file = function ($file_path) use (&$include_paths, $file_extensions) {
    $file_info = new SplFileInfo($file_path);

    if (in_array($file_info->getExtension(), $file_extensions))
    {
        $include_paths[] = realpath($file_path);
    }
};

// Todo: wrap with `-l` console logic instead of custom function
$queue_with_include_paths = function ($dir_path) use (&$include_paths, &$queue_with_include_paths, &$queue_file) {
    foreach (scandir($dir_path) as $f) {
        if ($f !== '.' and $f !== '..') {
            if (is_dir("$dir_path/$f")) {
                $queue_with_include_paths("$dir_path/$f");
            } else {
                $queue_file("$dir_path/$f");
            }
        }
    }
};

foreach ($codeclimate_config['include_paths'] as $path) {
    if (is_dir('/code/' . $path)) {
        $queue_with_include_paths('/code/' . $path);
    } else {
        $queue_file("/code/$path");
    }
}

// skip run if there are no paths
if (empty($include_paths))
{
    exit();
}

$output = new ConsoleOutput();
$factory = new PrinterFactory();
Config::get()->markdown_issue_messages = true;
$printer = $factory->getPrinter('codeclimate', $output);
Phan::setPrinter($printer);

$filter = new ChainedIssueFilter([
    new FileIssueFilter(new Phan()),
    new MinimumSeverityFilter($minimum_severity),
    new CategoryIssueFilter($mask)
]);
$collector = new BufferingCollector($filter);
Phan::setIssueCollector($collector);

// Analyze the file list provided via the CLI
Phan::analyzeFileList($code_base, $include_paths);
